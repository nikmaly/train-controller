#ifndef UTIL_ROTARYENCODER_H
#define UTIL_ROTARYENCODER_H

/**
 * @typedef {Object} EncoderCommand
 * @property {String} target - The target of the command (e.g., "motor").
 * @property {String} action - The action to be performed (e.g., "speed", "switch").
 * @property {String} value - The value associated with the action (e.g., speed value).
 */
struct EncoderCommand {
  String target;
  String action;
  String value;

  bool isValid() {
    return target.length() > 0 && action.length() > 0;
  }
};

class RotaryEncoder {
  private:
    int pinCLK;
    int pinDT;
    int pinSwitch;
    int count = 0;
    int pinCLK_prev;
    int pinCLK_value;
    boolean bool_CW;
    MotorDriver* activeTrackLine;
    MotorDriver* trackLineA;
    MotorDriver* trackLineB;

  public:
    /**
     * Constructs a RotaryEncoder object.
     * @param {int} pinCLK - The pin connected to the CLK signal of the rotary encoder.
     * @param {int} pinDT - The pin connected to the DT signal of the rotary encoder.
     * @param {int} pinSwitch - The pin connected to the switch of the rotary encoder.
     * @param {MotorDriver*} trackLineA - Pointer to the first track line motor driver.
     * @param {MotorDriver*} trackLineB - Pointer to the second track line motor driver.
     */
    RotaryEncoder(int pinCLK, int pinDT, int pinSwitch, MotorDriver* trackLineA, MotorDriver* trackLineB) 
      : pinCLK(pinCLK), pinDT(pinDT), pinSwitch(pinSwitch), activeTrackLine(trackLineA), trackLineA(trackLineA), trackLineB(trackLineB) {
      pinMode(pinCLK, INPUT);
      pinMode(pinDT, INPUT);
      pinMode(pinSwitch, INPUT_PULLUP);
      pinCLK_prev = digitalRead(pinCLK);
    }

    /**
     * Updates the state of the rotary encoder and returns an instruction set.
     * @returns {EncoderCommand} The command generated by the rotary encoder.
     */
    EncoderCommand update() {
      EncoderCommand command = {"", "", ""};
      pinCLK_value = digitalRead(pinCLK);

      // Check if knob is rotating
      if (pinCLK_value != pinCLK_prev) { 
        // If pin A state changed before pin B, rotation is clockwise
        if (digitalRead(pinDT) != pinCLK_value) {
          count++;
          bool_CW = true;
        } else {
          // If pin B state changed before pin A, rotation is counter-clockwise
          bool_CW = false;
          count--;
        }

        // Ensure the count is within the range -10 to 10
        count = constrain(count, -10, 10);

        // Map the encoder value to motor speed at a 10:1 ratio
        int speedValue = count * 10;
        command.target = "motor";
        command.action = "speed";
        command.value = String(speedValue);
      }

      pinCLK_prev = pinCLK_value;

      // Check if button is pressed (pinSwitch)
      if (digitalRead(pinSwitch) == LOW) {
        if (activeTrackLine == trackLineA) {
          activeTrackLine = trackLineB;
        } else {
          activeTrackLine = trackLineA;
        }

        command.target = "motor";
        command.action = "switch";

        delay(500); // Debounce delay
      }

      return command;
    }
};

#endif // UTIL_ROTARYENCODER_H